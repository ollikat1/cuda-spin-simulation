Changelog for the spin-2 simulation, version ???? (compared to the original).


Over 200 000 timesteps with N=200^3, the code currently runs about 80% faster. The 2-norm of the difference between the density matrices generated by the current and original codes is in the order of 1e-8. The absolute difference (max(density matrix - original density matrix)) is in the order of 1e-10.

Changes:
  
  -Biggest and most important changes are in the single time step iteration:
    -Similarly to the spin-1 simulation, every iteration now needs only one pair of FFT's and the kinetic term is computed for full time steps whenever possible. The performance gain from this is significant, but not as big as with the spin 1 simulation, because this time the kernel off_diagonal_term is somewhat of a bottleneck.
    -Removed a lot of repetition from the kernel form_diagonal_term_three_body, increasing performance.
    -Overhauled the kernel off_diagonal_term. Decreased memory spilling from 1400 bytes to about 400. This greatly increases performance. The kernel is now in a separate header ('off_diagonal.h') mostly for clarity.

  
  -Added 'volatile' keyword to indices. Especially in the register-heavy kernel off_diagonal_term, this greatly decreased register usage and memory spilling, which increases perormance.

  
	-The boolean value for resuming from a file is now called 'resume' instead of 'restart' to avoid confusion.


  -Host multithreading is utilized in writing and reading files if compiled with the flag -std=c++11. Not as thoroughly tested as with spin-1, but seems to work.


  -Added a host array 'h_d_PSIS', which holds the device pointers to the psi vectors. This allows iterating through them with a for loop, increasing readability, especially in the function calculate_energies.


  -Moved cuDoubleComplex arithmetic operations to separate header file 'cuDoubleComplexOps.h'.


	-Replaced all instances of pow(x,2) with sqr(x) (defined in cuDoubleComplexOps.h). Although this was mostly done because of compatibility issues with C++11, it also gives a small performance boost with minimal numerical accuracy loss.

  

  -Used and available device memory are now displayed correctly in the output file (there was an issue with long ints).


	-Fixed resuming from file when stepnum != 0.


  -Did pretty much the same cleanup and clarifications in main() and init() as with the spin-1 simulation. 


	-Known issues:
		-Some memory spills in ground state kernels jacobi and psiHpsi.
		-When for example Nx=Ny=Nz=200, loading the data into MATLAB takes a while (up to three minutes). This could be addressed by saving the data as HDF5 binary instead of ASCII text. This has many advantages. In addition to saving disk space, it is the underlying file format of MATLAB .mat files, which means that loading would be much faster. http://www.hdfgroup.org/HDF5/doc/index.html 

